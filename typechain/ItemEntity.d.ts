/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ItemEntityInterface extends ethers.utils.Interface {
  functions: {
    "getAddress()": FunctionFragment;
    "getAsset()": FunctionFragment;
    "getBoolFalse()": FunctionFragment;
    "getBoolTrue()": FunctionFragment;
    "getBytes()": FunctionFragment;
    "getBytes16()": FunctionFragment;
    "getBytes32()": FunctionFragment;
    "getBytes8()": FunctionFragment;
    "getName()": FunctionFragment;
    "getString16()": FunctionFragment;
    "getString32()": FunctionFragment;
    "getString64()": FunctionFragment;
    "getString8()": FunctionFragment;
    "getUint128()": FunctionFragment;
    "getUint16()": FunctionFragment;
    "getUint256()": FunctionFragment;
    "getUint32()": FunctionFragment;
    "getUint64()": FunctionFragment;
    "getUint8()": FunctionFragment;
    "multipleOne(uint8,bool,string,bytes8)": FunctionFragment;
    "multipleTwo(string,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBoolFalse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBoolTrue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBytes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBytes16",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBytes8", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getString16",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getString32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getString64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getString8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUint128",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUint16", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUint256",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUint32", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUint64", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUint8", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multipleOne",
    values: [BigNumberish, boolean, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multipleTwo",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoolFalse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoolTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBytes16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBytes8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getString16",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getString32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getString64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getString8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint8", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multipleOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multipleTwo",
    data: BytesLike
  ): Result;

  events: {};
}

export class ItemEntity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ItemEntityInterface;

  functions: {
    getAddress(overrides?: CallOverrides): Promise<[string]>;

    getAsset(overrides?: CallOverrides): Promise<[string]>;

    getBoolFalse(overrides?: CallOverrides): Promise<[boolean]>;

    getBoolTrue(overrides?: CallOverrides): Promise<[boolean]>;

    getBytes(overrides?: CallOverrides): Promise<[string]>;

    getBytes16(overrides?: CallOverrides): Promise<[string]>;

    getBytes32(overrides?: CallOverrides): Promise<[string]>;

    getBytes8(overrides?: CallOverrides): Promise<[string]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    getString16(overrides?: CallOverrides): Promise<[string]>;

    getString32(overrides?: CallOverrides): Promise<[string]>;

    getString64(overrides?: CallOverrides): Promise<[string]>;

    getString8(overrides?: CallOverrides): Promise<[string]>;

    getUint128(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUint16(overrides?: CallOverrides): Promise<[number]>;

    getUint256(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUint32(overrides?: CallOverrides): Promise<[number]>;

    getUint64(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUint8(overrides?: CallOverrides): Promise<[number]>;

    multipleOne(
      numVar: BigNumberish,
      boolVar: boolean,
      stringVar: string,
      bytesVar: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multipleTwo(
      one: string,
      two: string,
      three: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getAddress(overrides?: CallOverrides): Promise<string>;

  getAsset(overrides?: CallOverrides): Promise<string>;

  getBoolFalse(overrides?: CallOverrides): Promise<boolean>;

  getBoolTrue(overrides?: CallOverrides): Promise<boolean>;

  getBytes(overrides?: CallOverrides): Promise<string>;

  getBytes16(overrides?: CallOverrides): Promise<string>;

  getBytes32(overrides?: CallOverrides): Promise<string>;

  getBytes8(overrides?: CallOverrides): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  getString16(overrides?: CallOverrides): Promise<string>;

  getString32(overrides?: CallOverrides): Promise<string>;

  getString64(overrides?: CallOverrides): Promise<string>;

  getString8(overrides?: CallOverrides): Promise<string>;

  getUint128(overrides?: CallOverrides): Promise<BigNumber>;

  getUint16(overrides?: CallOverrides): Promise<number>;

  getUint256(overrides?: CallOverrides): Promise<BigNumber>;

  getUint32(overrides?: CallOverrides): Promise<number>;

  getUint64(overrides?: CallOverrides): Promise<BigNumber>;

  getUint8(overrides?: CallOverrides): Promise<number>;

  multipleOne(
    numVar: BigNumberish,
    boolVar: boolean,
    stringVar: string,
    bytesVar: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  multipleTwo(
    one: string,
    two: string,
    three: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getAddress(overrides?: CallOverrides): Promise<string>;

    getAsset(overrides?: CallOverrides): Promise<string>;

    getBoolFalse(overrides?: CallOverrides): Promise<boolean>;

    getBoolTrue(overrides?: CallOverrides): Promise<boolean>;

    getBytes(overrides?: CallOverrides): Promise<string>;

    getBytes16(overrides?: CallOverrides): Promise<string>;

    getBytes32(overrides?: CallOverrides): Promise<string>;

    getBytes8(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    getString16(overrides?: CallOverrides): Promise<string>;

    getString32(overrides?: CallOverrides): Promise<string>;

    getString64(overrides?: CallOverrides): Promise<string>;

    getString8(overrides?: CallOverrides): Promise<string>;

    getUint128(overrides?: CallOverrides): Promise<BigNumber>;

    getUint16(overrides?: CallOverrides): Promise<number>;

    getUint256(overrides?: CallOverrides): Promise<BigNumber>;

    getUint32(overrides?: CallOverrides): Promise<number>;

    getUint64(overrides?: CallOverrides): Promise<BigNumber>;

    getUint8(overrides?: CallOverrides): Promise<number>;

    multipleOne(
      numVar: BigNumberish,
      boolVar: boolean,
      stringVar: string,
      bytesVar: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    multipleTwo(
      one: string,
      two: string,
      three: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(overrides?: CallOverrides): Promise<BigNumber>;

    getBoolFalse(overrides?: CallOverrides): Promise<BigNumber>;

    getBoolTrue(overrides?: CallOverrides): Promise<BigNumber>;

    getBytes(overrides?: CallOverrides): Promise<BigNumber>;

    getBytes16(overrides?: CallOverrides): Promise<BigNumber>;

    getBytes32(overrides?: CallOverrides): Promise<BigNumber>;

    getBytes8(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    getString16(overrides?: CallOverrides): Promise<BigNumber>;

    getString32(overrides?: CallOverrides): Promise<BigNumber>;

    getString64(overrides?: CallOverrides): Promise<BigNumber>;

    getString8(overrides?: CallOverrides): Promise<BigNumber>;

    getUint128(overrides?: CallOverrides): Promise<BigNumber>;

    getUint16(overrides?: CallOverrides): Promise<BigNumber>;

    getUint256(overrides?: CallOverrides): Promise<BigNumber>;

    getUint32(overrides?: CallOverrides): Promise<BigNumber>;

    getUint64(overrides?: CallOverrides): Promise<BigNumber>;

    getUint8(overrides?: CallOverrides): Promise<BigNumber>;

    multipleOne(
      numVar: BigNumberish,
      boolVar: boolean,
      stringVar: string,
      bytesVar: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multipleTwo(
      one: string,
      two: string,
      three: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBoolFalse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBoolTrue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBytes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBytes16(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBytes32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBytes8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getString16(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getString32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getString64(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getString8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUint128(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUint16(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUint256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUint32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUint64(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUint8(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multipleOne(
      numVar: BigNumberish,
      boolVar: boolean,
      stringVar: string,
      bytesVar: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multipleTwo(
      one: string,
      two: string,
      three: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
